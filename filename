==2917== Memcheck, a memory error detector
==2917== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==2917== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==2917== Command: ./hsh
==2917== Parent PID: 1725
==2917== 
==2917== Invalid write of size 1
==2917==    at 0x400BAE: _strcpy (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x4012C8: get_tokenization (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x401422: main (in /home/vagrant/simple_shell/hsh)
==2917==  Address 0x5200467 is 0 bytes after a block of size 7 alloc'd
==2917==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2917==    by 0x401257: get_tokenization (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x401422: main (in /home/vagrant/simple_shell/hsh)
==2917== 
==2917== Syscall param stat(file_name) points to unaddressable byte(s)
==2917==    at 0x4F25CF5: _xstat (xstat.c:35)
==2917==    by 0x400F0B: get_path (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x40143E: main (in /home/vagrant/simple_shell/hsh)
==2917==  Address 0x5200467 is 0 bytes after a block of size 7 alloc'd
==2917==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2917==    by 0x401257: get_tokenization (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x401422: main (in /home/vagrant/simple_shell/hsh)
==2917== 
==2918== Syscall param execve(filename) points to unaddressable byte(s)
==2918==    at 0x4EFC137: execve (execve.c:33)
==2918==    by 0x401346: init_execution (in /home/vagrant/simple_shell/hsh)
==2918==    by 0x40145E: main (in /home/vagrant/simple_shell/hsh)
==2918==  Address 0x5200467 is 0 bytes after a block of size 7 alloc'd
==2918==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2918==    by 0x401257: get_tokenization (in /home/vagrant/simple_shell/hsh)
==2918==    by 0x401422: main (in /home/vagrant/simple_shell/hsh)
==2918== 
==2918== Syscall param execve(argv[i]) points to unaddressable byte(s)
==2918==    at 0x4EFC137: execve (execve.c:33)
==2918==    by 0x401346: init_execution (in /home/vagrant/simple_shell/hsh)
==2918==    by 0x40145E: main (in /home/vagrant/simple_shell/hsh)
==2918==  Address 0x5200467 is 0 bytes after a block of size 7 alloc'd
==2918==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2918==    by 0x401257: get_tokenization (in /home/vagrant/simple_shell/hsh)
==2918==    by 0x401422: main (in /home/vagrant/simple_shell/hsh)
==2918== 
==2917== Conditional jump or move depends on uninitialised value(s)
==2917==    at 0x400E42: get_input (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x4013FB: main (in /home/vagrant/simple_shell/hsh)
==2917== 
==2917== Invalid read of size 1
==2917==    at 0x400E3D: get_input (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x4013FB: main (in /home/vagrant/simple_shell/hsh)
==2917==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2917== 
==2917== 
==2917== Process terminating with default action of signal 11 (SIGSEGV)
==2917==  Access not within mapped region at address 0x0
==2917==    at 0x400E3D: get_input (in /home/vagrant/simple_shell/hsh)
==2917==    by 0x4013FB: main (in /home/vagrant/simple_shell/hsh)
==2917==  If you believe this happened as a result of a stack
==2917==  overflow in your program's main thread (unlikely but
==2917==  possible), you can try to increase the size of the
==2917==  main thread stack using the --main-stacksize= flag.
==2917==  The main thread stack size used in this run was 8388608.
==2917== 
==2917== HEAP SUMMARY:
==2917==     in use at exit: 146,797,680 bytes in 1,223,314 blocks
==2917==   total heap usage: 1,223,317 allocs, 3 frees, 146,798,607 bytes allocated
==2917== 
--2917-- core    : 58724352/58724352  max/curr mmap'd, 1/0 unsplit/split sb unmmap'd,  51848160/51843936 max/curr,       24744/  80056416 totalloc-blocks/bytes,       24726 searches 8 rzB
--2917-- dinfo   : 12443648/ 7467008  max/curr mmap'd, 2/4 unsplit/split sb unmmap'd,  10636032/ 4921472 max/curr,      197912/  37373104 totalloc-blocks/bytes,      197984 searches 8 rzB
--2917-- client  : 234881024/234881024  max/curr mmap'd, 0/0 unsplit/split sb unmmap'd,  156586944/156586944 max/curr,     1223317/ 156586944 totalloc-blocks/bytes,     1223261 searches 24 rzB
--2917-- demangle:        0/       0  max/curr mmap'd, 0/0 unsplit/split sb unmmap'd,         0/       0 max/curr,           0/         0 totalloc-blocks/bytes,           0 searches 8 rzB
--2917-- ttaux   :   131072/  131072  max/curr mmap'd, 0/0 unsplit/split sb unmmap'd,     73920/   49344 max/curr,         344/    131504 totalloc-blocks/bytes,         343 searches 8 rzB
--2917-- translate:            fast SP updates identified: 1,511 ( 91.7%)
--2917-- translate:   generic_known SP updates identified: 94 (  5.7%)
--2917-- translate: generic_unknown SP updates identified: 42 (  2.5%)
--2917--     tt/tc: 4,108 tt lookups requiring 4,139 probes
--2917--     tt/tc: 2,303 fast-cache updates, 5 flushes
--2917--  transtab: new        1,841 (40,974 -> 653,378; ratio 159:10) [0 scs]
--2917--  transtab: dumped     0 (0 -> ??)
--2917--  transtab: discarded  12 (379 -> ??)
--2917-- scheduler: 29,368,983 event checks.
--2917-- scheduler: 18,351,258 indir transfers, 397 misses (1 in 46224)
--2917-- scheduler: 293/3,672,512 major/minor sched events.
--2917--    sanity: 293 cheap, 11 expensive checks.
--2917--    exectx: 769 lists, 11 contexts (avg 0 per list)
--2917--    exectx: 2,446,640 searches, 2,446,629 full compares (999 per 1000)
--2917--    exectx: 0 cmp2, 1,223,314 cmp4, 0 cmpAll
--2917--  errormgr: 4 supplist searches, 324 comparisons during search
--2917--  errormgr: 1,223,317 errlist searches, 1,223,319 comparisons during search
--2917--  memcheck: freelist: vol 927 length 3
--2917--  memcheck: sanity checks: 293 cheap, 12 expensive
--2917--  memcheck: auxmaps: 0 auxmap entries (0k, 0M) in use
--2917--  memcheck: auxmaps_L1: 0 searches, 0 cmps, ratio 0:10
--2917--  memcheck: auxmaps_L2: 0 searches, 0 nodes
--2917--  memcheck: SMs: n_issued      = 3595 (57520k, 56M)
--2917--  memcheck: SMs: n_deissued    = 0 (0k, 0M)
--2917--  memcheck: SMs: max_noaccess  = 1048575 (16777200k, 16383M)
--2917--  memcheck: SMs: max_undefined = 0 (0k, 0M)
--2917--  memcheck: SMs: max_defined   = 125 (2000k, 1M)
--2917--  memcheck: SMs: max_non_DSM   = 3595 (57520k, 56M)
--2917--  memcheck: max sec V bit nodes:    0 (0k, 0M)
--2917--  memcheck: set_sec_vbits8 calls: 0 (new: 0, updates: 0)
--2917--  memcheck: max shadow mem size:   65760k, 64M

host stacktrace:
==2917==    at 0x3805DB16: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Empty
client stack range: [0xFFEFFE000 0xFFF000FFF] client SP: 0xFFF000478
valgrind stack top usage: 13480 of 1048576

==2917== 
==2917==     Valgrind's memory management: out of memory:
==2917==        newSuperblock's request for 9789440 bytes failed.
==2917==        429776896 bytes have already been allocated.
==2917==     Valgrind cannot continue.  Sorry.
==2917== 
==2917==     There are several possible reasons for this.
==2917==     - You have some kind of memory limit in place.  Look at the
==2917==       output of 'ulimit -a'.  Is there a limit on the size of
==2917==       virtual memory or address space?
==2917==     - You have run out of swap space.
==2917==     - Valgrind has a bug.  If you think this is the case or you are
==2917==     not sure, please let us know and we'll try to fix it.
==2917==     Please note that programs can take substantially more memory than
==2917==     normal when running under Valgrind tools, eg. up to twice or
==2917==     more, depending on the tool.  On a 64-bit machine, Valgrind
==2917==     should be able to make use of up 32GB memory.  On a 32-bit
==2917==     machine, Valgrind should be able to use all the memory available
==2917==     to a single process, up to 4GB if that's how you have your
==2917==     kernel configured.  Most 32-bit Linux setups allow a maximum of
==2917==     3GB per process.
==2917== 
==2917==     Whatever the reason, Valgrind cannot continue.  Sorry.
